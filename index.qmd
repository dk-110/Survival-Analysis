<h2 style="text-align: left;">Project Summary</h2>
The clinical data used in this project was obtained from the Genomic Data Commons (GDC), a comprehensive platform managed by the National Cancer Institute (NCI) that provides open access to cancer genomics datasets. This interactive plot below visualizes clinical data from patients diagnosed with Acute Myeloid Leukemia (AML) a type of blood cancer. Each dot on the graph represents an individual patient. 

-	**X-axis**: Survival time (years) 
- **Y-axis**: Treatment outcome (*Complete Response*, *Unknown*, or *Not Reported*)  
- **Dot Color**: Gender of the patient  

The treatment outcomes include:

- **Complete Response** – meaning the patient responded well to treatment
-	**Unknown** – outcome is unclear or ambiguous
-	**Not Reported** – outcome data is missing from the medical record

The plot helps identify patterns in survival patients with a "Complete Response" often show longer survival durations, while those with "Unknown" or "Not Reported" outcomes tend to have more scattered or shorter survival times. 

-	**Reminder** The presence of missing data highlights challenges in analyzing real-world clinical datasets, where not every case is fully documented.

<hr style="border: none; border-top: 1px solid #ccc; margin: 1em 0;">

---
execute: 
  echo: false
  warning: false
  message: false
---
<h2 style="text-align: left;">Survival Analysis of Acute Myeloid Leukemia (AML) Patients by Treatment Outcome </h2>
```{r}
# Load libraries
library(readr)
library(survival)
library(survminer)
library(dplyr)
library(forcats)
library(stringr) # needed for str_replace_all

# Load the clinical data
clinical <- read_tsv("clinical.tsv")
show_col_types = FALSE
```

```{r}
# Clean and tidy the data
clinical_clean <- clinical %>%
  # 1. Convert factor to character for cleaning
  mutate(across(where(is.factor), as.character)) %>%
 
  # 2. Replace '--' (and extra quotes/whitespace) with NA
  mutate(across(where(is.character), ~ na_if(str_replace_all(.x, "[`'\"]", "") %>% trimws(), "--"))) %>%
 
  # 3. Convert yes/no text to logical
  mutate(treatments.treatment_or_therapy = case_when(
    treatments.treatment_or_therapy %in% c("yes", "Yes", "TRUE", TRUE) ~ TRUE,
    treatments.treatment_or_therapy %in% c("no", "No", "FALSE", FALSE) ~ FALSE,
    TRUE ~ NA
  )) %>%
 
  # 4. Drop unnecessary or duplicate columns
  select(-matches("\\.\\.\\.")) %>%
  select(where(~ n_distinct(., na.rm = TRUE) > 1)) %>%
 
  # 5. Remove duplicate rows
  distinct() %>%
 
  # 6. Convert cleaned characters back to factors
  mutate(across(where(is.character), as.factor))

```

```{r}
# Create survival_time and event variables
# If patient is dead, use days_to_death
#If patient is alive, use days_to_last_follow_up
#event: 1 if vital_status == "Dead" and 0 if vital_status == "Alive"
# Create survival time and event columns
clinical_clean <- clinical_clean %>%
  mutate(
    survival_time = ifelse(
      as.character(demographic.vital_status) == "Dead",
      as.numeric(as.character(demographic.days_to_death)),
      as.numeric(diagnoses.days_to_last_follow_up)
    ),
    event = ifelse(as.character(demographic.vital_status) == "Dead", 1, 0),
    survival_years = survival_time / 365
  )
```


```{r}
library(plotly)
library(dplyr)
library(ggplot2)

# Replace NA survival years with a value or label for plotting
plot_data <- clinical_clean %>%
  mutate(
    survival_years_display = ifelse(
      is.na(survival_years), NA, survival_years
    ),
    treatments.treatment_outcome = fct_explicit_na(treatments.treatment_outcome, na_level = "Not Reported")
  )

# Plot
# Plot
p <- ggplot(plot_data, aes(
  x = survival_years_display,
  y = treatments.treatment_outcome,
  color = demographic.gender,
  text = paste(
    "Gender:", demographic.gender,
    "<br>Survival (years):", round(survival_years_display, 2),
    "<br>Outcome:", treatments.treatment_outcome
  )
)) +
  geom_jitter(width = 0, height = 0.2, alpha = 0.7, size = 2, na.rm = FALSE) +
  labs(
    caption = "Source: Genomic Data Commons (GDC)",
    x = "Survival Time (Years)",
    y = "Treatment Outcome",
    color = "Gender"
  ) +
  theme_minimal() +
  theme(
    plot.caption = element_text(size = 10, face = "italic", hjust = 1, margin = margin(t = 10)),
    axis.title = element_text(size = 14, face = "bold"),
    axis.text = element_text(size = 12),
    legend.title = element_text(size = 13, face = "bold")
  )

# Make it interactive
ggplotly(p, tooltip = "text")
```



